allowVolumeExpansion: true
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: longhorn-wffc-db
parameters:
  dataLocality: best-effort
  fsType: ext4
  migratable: "true"
  numberOfReplicas: "3"
  staleReplicaTimeout: "30"
provisioner: driver.longhorn.io
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/component: service-account
    app.kubernetes.io/name: approval-job
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: approval-job-sa
  namespace: pern-app-production
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/component: service-account
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-sa
  namespace: pern-app-production
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
    vault.hashicorp.com/role: pern-app
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: external-secrets-sa
  namespace: pern-app-production
---
apiVersion: v1
automountServiceAccountToken: false
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/component: service-account
    app.kubernetes.io/name: frontend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-sa
  namespace: pern-app-production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: approval-job-role
  namespace: pern-app-production
rules:
- apiGroups:
  - argoproj.io
  resources:
  - rollouts
  verbs:
  - get
  - list
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-role
  namespace: pern-app-production
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: approval-job-rolebinding
  namespace: pern-app-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: approval-job-role
subjects:
- kind: ServiceAccount
  name: approval-job-sa
  namespace: pern-app-production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-rolebinding
  namespace: pern-app-production
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: backend-role
subjects:
- kind: ServiceAccount
  name: backend-sa
  namespace: pern-app-production
---
apiVersion: v1
data:
  redis.conf: |
    # Redis configuration
    maxmemory 256mb
    maxmemory-policy allkeys-lru
    timeout 300
    tcp-keepalive 60
    save 900 1
    save 300 10
    save 60 10000
    rdbcompression yes
    rdbchecksum yes
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-config
  namespace: pern-app-production
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
    external-secrets.io/backend-version: "1"
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-secret
  namespace: pern-app-production
stringData:
  database-url: postgresql://postgres:REPLACE_WITH_ACTUAL_PASSWORD@postgresql-service:5432/pern_db
  jwt-secret: REPLACE_WITH_ACTUAL_JWT_SECRET_FROM_VAULT
  redis-url: redis://:REPLACE_WITH_ACTUAL_REDIS_PASSWORD@redis-service:6379
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
    external-secrets.io/postgresql-version: "1"
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: postgresql-secret
  namespace: pern-app-production
stringData:
  database: pern_db
  password: REPLACE_WITH_ACTUAL_DB_PASSWORD
  username: postgres
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
    external-secrets.io/redis-version: "1"
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-secret
  namespace: pern-app-production
stringData:
  password: REPLACE_WITH_ACTUAL_REDIS_PASSWORD
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app: backend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
    service-type: canary
  name: backend-canary-service
  namespace: pern-app-production
spec:
  ports:
  - name: http
    port: 3001
    protocol: TCP
    targetPort: 3001
  selector:
    app: backend
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app: backend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-service
  namespace: pern-app-production
spec:
  ports:
  - name: http
    port: 3001
    protocol: TCP
    targetPort: 3001
  selector:
    app: backend
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-canary-service
  namespace: pern-app-production
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: frontend
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-service
  namespace: pern-app-production
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: frontend
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: postgresql-service
  namespace: pern-app-production
spec:
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
  selector:
    app: postgresql
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-service
  namespace: pern-app-production
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-pvc
  namespace: pern-app-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis
  namespace: pern-app-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      annotations:
        argocd.argoproj.io/tracking-id: pern-app-production
        deployment.kubernetes.io/environment: production
      labels:
        app: redis
    spec:
      containers:
      - command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: redis-secret
        image: redis:7-alpine
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        name: redis
        ports:
        - containerPort: 6379
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        volumeMounts:
        - mountPath: /usr/local/etc/redis/redis.conf
          name: redis-config
          subPath: redis.conf
        - mountPath: /data
          name: redis-storage
      volumes:
      - configMap:
          name: redis-config
        name: redis-config
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: postgresql
  namespace: pern-app-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  serviceName: postgresql-service
  template:
    metadata:
      annotations:
        argocd.argoproj.io/tracking-id: pern-app-production
        deployment.kubernetes.io/environment: production
      labels:
        app: postgresql
    spec:
      containers:
      - env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              key: database
              name: postgresql-secret
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: postgresql-secret
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: postgresql-secret
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        image: postgres:15-alpine
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          failureThreshold: 6
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        name: postgresql
        ports:
        - containerPort: 5432
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 200m
            memory: 512Mi
        startupProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          failureThreshold: 30
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresql-data
      initContainers:
      - command:
        - sh
        - -c
        - mkdir -p /var/lib/postgresql/data/pgdata && chown -R 999:999 /var/lib/postgresql/data
        image: busybox:1.36
        name: init-permissions
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresql-data
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsUser: 999
  volumeClaimTemplates:
  - metadata:
      name: postgresql-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
      storageClassName: local-path
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-pdb
  namespace: pern-app-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: backend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-pdb
  namespace: pern-app-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: frontend
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-pdb
  namespace: pern-app-production
spec:
  maxUnavailable: 0
  selector:
    matchLabels:
      app: redis
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app: backend
    app.kubernetes.io/component: api-server
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend
  namespace: pern-app-production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  strategy:
    canary:
      analysis:
        args:
        - name: service-name
          value: backend-canary-service
        startingStep: 2
        templates:
        - templateName: success-rate
      canaryService: backend-canary-service
      stableService: backend-service
      steps:
      - setWeight: 20
      - pause: {}
      - setWeight: 40
      - pause:
          duration: 10s
      - setWeight: 60
      - pause:
          duration: 10s
      - setWeight: 80
      - pause:
          duration: 10s
      trafficRouting:
        nginx:
          stableIngress: pern-app-ingress
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/component: api-server
        app.kubernetes.io/name: backend
        app.kubernetes.io/part-of: pern-stack
        managed-by: argocd
        version: v1
    spec:
      containers:
      - name: backend
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 300m
            memory: 512Mi
      imagePullSecrets:
      - name: ghcr-creds
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      serviceAccountName: backend-sa
---
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend
  namespace: pern-app-production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  strategy:
    canary:
      analysis:
        args:
        - name: service-name
          value: frontend-canary-service
        startingStep: 2
        templates:
        - templateName: success-rate
      canaryService: frontend-canary-service
      stableService: frontend-service
      steps:
      - setWeight: 20
      - pause: {}
      - setWeight: 40
      - pause:
          duration: 10
      - setWeight: 60
      - pause:
          duration: 10
      - setWeight: 80
      - pause:
          duration: 10
      trafficRouting:
        nginx:
          stableIngress: pern-app-ingress
  template:
    metadata:
      labels:
        app: frontend
        app.kubernetes.io/name: frontend
        app.kubernetes.io/part-of: pern-stack
        managed-by: argocd
        version: v1
    spec:
      containers:
      - name: frontend
        resources:
          limits:
            cpu: 400m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
      imagePullSecrets:
      - name: ghcr-creds
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "4"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-hpa
  namespace: pern-app-production
spec:
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 100
      stabilizationWindowSeconds: 60
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 70
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 3
  scaleTargetRef:
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    name: backend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-hpa
  namespace: pern-app-production
spec:
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 100
      stabilizationWindowSeconds: 60
  maxReplicas: 8
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 70
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 80
        type: Utilization
    type: Resource
  minReplicas: 3
  scaleTargetRef:
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    name: frontend
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "3"
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/name: backend
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
    release: prometheus
  name: pern-app-backend
  namespace: pern-app-production
spec:
  endpoints:
  - honorLabels: true
    interval: 30s
    path: /metrics
    port: http
    scrapeTimeout: 10s
  - honorLabels: true
    interval: 60s
    metricRelabelings:
    - replacement: pern_backend_health_status
      sourceLabels:
      - __name__
      targetLabel: __name__
    path: /health
    port: http
    scrapeTimeout: 5s
  namespaceSelector:
    matchNames:
    - pern-app-staging
    - pern-app-production
  selector:
    matchLabels:
      app: backend
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app: postgresql
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
    release: prometheus
  name: postgresql-metrics
  namespace: pern-app-production
spec:
  endpoints:
  - interval: 30s
    port: postgres
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - pern-app-staging
    - pern-app-production
  selector:
    matchLabels:
      app: postgresql
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app: redis
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
    release: prometheus
  name: redis-metrics
  namespace: pern-app-production
spec:
  endpoints:
  - interval: 30s
    port: redis
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - pern-app-staging
    - pern-app-production
  selector:
    matchLabels:
      app: redis
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "4"
    argocd.argoproj.io/tracking-id: pern-app-production
    cert-manager.io/cluster-issuer: letsencrypt-prod
    deployment.kubernetes.io/environment: production
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: pern-app-ingress
  namespace: pern-app-production
spec:
  rules:
  - host: pern-app.ankinimbom.com
    http:
      paths:
      - backend:
          service:
            name: backend-service
            port:
              number: 3001
        path: /api
        pathType: Prefix
      - backend:
          service:
            name: frontend-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pern-app.ankinimbom.com
    secretName: pern-app-tls
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: backend-netpol
  namespace: pern-app-production
spec:
  egress:
  - ports:
    - port: 5432
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: postgresql
  - ports:
    - port: 6379
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: redis
  - ports:
    - port: 53
      protocol: TCP
    - port: 53
      protocol: UDP
    to: []
  - ports:
    - port: 443
      protocol: TCP
    to: []
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - port: 3001
      protocol: TCP
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: deny-all-default
  namespace: pern-app-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: frontend-netpol
  namespace: pern-app-production
spec:
  egress:
  - ports:
    - port: 3001
      protocol: TCP
    to:
    - podSelector:
        matchLabels:
          app: backend
  - ports:
    - port: 53
      protocol: TCP
    - port: 53
      protocol: UDP
    to: []
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - port: 80
      protocol: TCP
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: postgresql-netpol
  namespace: pern-app-production
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: backend
    ports:
    - port: 5432
      protocol: TCP
  podSelector:
    matchLabels:
      app: postgresql
  policyTypes:
  - Ingress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  annotations:
    argocd.argoproj.io/tracking-id: pern-app-production
    deployment.kubernetes.io/environment: production
  labels:
    app.kubernetes.io/part-of: pern-stack
    environment: production
    managed-by: argocd
  name: redis-netpol
  namespace: pern-app-production
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: backend
    ports:
    - port: 6379
      protocol: TCP
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
