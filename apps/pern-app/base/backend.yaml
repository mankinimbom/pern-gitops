apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: backend
  namespace: pern-app
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api-server
    app.kubernetes.io/part-of: pern-stack
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  
  # Advanced canary deployment strategy with metrics-driven promotion
  strategy:
    canary:
      # Service routing configuration
      canaryService: backend-canary-service
      stableService: backend-service
      
      # Traffic management
      trafficRouting:
        nginx:
          stableIngress: backend-ingress
          additionalIngressAnnotations:
            nginx.ingress.kubernetes.io/canary-weight-total: "100"
      
      # Progressive traffic shifting with analysis gates
      steps:
      - setWeight: 10
      - pause: 
          duration: 30s
      - setWeight: 25
      - pause: 
          duration: 2m
      - analysis:
          templates:
          - templateName: backend-success-rate
          args:
          - name: service-name
            value: backend-canary-service
          - name: prometheus-server
            value: http://prometheus-server.monitoring.svc.cluster.local:80
      - setWeight: 50
      - pause: 
          duration: 5m
      - analysis:
          templates:
          - templateName: backend-success-rate
          - templateName: backend-response-time
          args:
          - name: service-name
            value: backend-canary-service
      - setWeight: 75
      - pause: 
          duration: 10m
      - analysis:
          templates:
          - templateName: backend-success-rate
          - templateName: backend-response-time
          - templateName: backend-error-rate
          args:
          - name: service-name
            value: backend-canary-service
      
      # Analysis configuration
      analysis:
        templates:
        - templateName: backend-success-rate
        startingStep: 3
        args:
        - name: service-name
          value: backend-canary-service
        - name: prometheus-server
          value: http://prometheus-server.monitoring.svc.cluster.local:80
      
      # Automatic rollback triggers
      abort:
        failureLimit: 3
        
      # Scale down behavior
      scaleDownDelaySeconds: 300
      abortScaleDownDelaySeconds: 600
      
  selector:
    matchLabels:
      app: backend
      app.kubernetes.io/name: backend
      
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/name: backend
        app.kubernetes.io/component: api-server
        app.kubernetes.io/part-of: pern-stack
        app.kubernetes.io/version: "{{.Values.image.tag}}"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
        
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service account for RBAC
      serviceAccountName: backend-sa
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: topology.kubernetes.io/zone
      
      # Topology spread constraints
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: backend
      
      containers:
      - name: backend
        image: ghcr.io/mankinimbom/pern-backend:v1.0.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        # Enhanced environment configuration
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: database-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: jwt-secret
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: redis-url
        - name: CORS_ORIGIN
          value: "https://pern-app.ankinimbom.com"
        - name: LOG_LEVEL
          value: "info"
        - name: RATE_LIMIT_WINDOW_MS
          value: "900000"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "1000"
        - name: METRICS_PORT
          value: "9090"
        - name: HEALTH_CHECK_TIMEOUT
          value: "5000"
        
        # Enhanced security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Optimized resource allocation
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Comprehensive health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
          
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Volume mounts for writable directories
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
        - name: logs-volume
          mountPath: /app/logs
        
        # Environment-specific lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      
      # Volumes for writable directories (read-only filesystem)
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      
      # DNS and networking configuration
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      # Node selection and scheduling
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: "!spot"
      
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: pern-app
spec:
  selector:
    app: backend
  ports:
    - port: 3001
      targetPort: 3001
---
apiVersion: v1
kind: Service
metadata:
  name: backend-canary-service
  namespace: pern-app
spec:
  selector:
    app: backend
  ports:
    - port: 3001
      targetPort: 3001
