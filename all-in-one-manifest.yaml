# ============================================
# Production-Grade GitOps All-in-One Manifest
# Apply with: kubectl apply -f all-in-one-manifest.yaml
# ============================================

# AppProject with comprehensive RBAC and governance
---
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: pern-app
  namespace: argocd
  labels:
    app.kubernetes.io/name: pern-app-project
    app.kubernetes.io/component: governance
    app.kubernetes.io/part-of: pern-gitops
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    project.argoproj.io/description: "Production PERN Stack Application Project with comprehensive governance"
spec:
  description: "Production-ready PERN stack with progressive delivery, comprehensive RBAC, and enterprise governance"
  
  # Source repositories
  sourceRepos:
  - 'https://github.com/mankinimbom/pern-gitops.git'
  - 'https://github.com/mankinimbom/pern-app.git'
  - 'https://helm.postgresql.org'
  - 'https://charts.bitnami.com/bitnami'
  - 'https://prometheus-community.github.io/helm-charts'
  - 'https://grafana.github.io/helm-charts'
  - 'https://kubernetes.github.io/ingress-nginx'
  - '*'  # Allow all repos for maximum flexibility
  
  # Destination clusters and namespaces
  destinations:
  - namespace: 'pern-app-*'
    server: https://kubernetes.default.svc
    name: in-cluster
  - namespace: 'argocd'
    server: https://kubernetes.default.svc
    name: in-cluster
  - namespace: 'argo-rollouts'
    server: https://kubernetes.default.svc
    name: in-cluster
  - namespace: 'monitoring'
    server: https://kubernetes.default.svc
    name: in-cluster
  - namespace: 'ingress-nginx'
    server: https://kubernetes.default.svc
    name: in-cluster
  - namespace: 'kube-system'
    server: https://kubernetes.default.svc
    name: in-cluster
    
  # Comprehensive resource whitelist
  clusterResourceWhitelist:
  - group: ''
    kind: Namespace
  - group: ''
    kind: PersistentVolume
  - group: rbac.authorization.k8s.io
    kind: ClusterRole
  - group: rbac.authorization.k8s.io
    kind: ClusterRoleBinding
  - group: apiextensions.k8s.io
    kind: CustomResourceDefinition
  - group: argoproj.io
    kind: AnalysisTemplate
  - group: argoproj.io
    kind: Rollout
  - group: networking.k8s.io
    kind: NetworkPolicy
  - group: policy
    kind: PodSecurityPolicy
  - group: storage.k8s.io
    kind: StorageClass
  - group: admissionregistration.k8s.io
    kind: MutatingWebhookConfiguration
  - group: admissionregistration.k8s.io
    kind: ValidatingWebhookConfiguration

  # Comprehensive namespace resource whitelist
  namespaceResourceWhitelist:
  - group: ''
    kind: ConfigMap
  - group: ''
    kind: Secret
  - group: ''
    kind: Service
  - group: ''
    kind: ServiceAccount
  - group: ''
    kind: PersistentVolumeClaim
  - group: apps
    kind: Deployment
  - group: apps
    kind: StatefulSet
  - group: apps
    kind: ReplicaSet
  - group: extensions
    kind: Ingress
  - group: networking.k8s.io
    kind: Ingress
  - group: networking.k8s.io
    kind: NetworkPolicy
  - group: rbac.authorization.k8s.io
    kind: Role
  - group: rbac.authorization.k8s.io
    kind: RoleBinding
  - group: autoscaling
    kind: HorizontalPodAutoscaler
  - group: policy
    kind: PodDisruptionBudget
  - group: argoproj.io
    kind: Rollout
  - group: argoproj.io
    kind: AnalysisTemplate
  - group: argoproj.io
    kind: AnalysisRun
  - group: argoproj.io
    kind: Experiment
  - group: monitoring.coreos.com
    kind: ServiceMonitor
  - group: monitoring.coreos.com
    kind: PrometheusRule

  # Multi-role RBAC configuration
  roles:
  # Platform Administrator - Full access
  - name: platform-admin
    description: "Platform administrators with full project access"
    policies:
    - p, proj:pern-app:platform-admin, applications, *, pern-app/*, allow
    - p, proj:pern-app:platform-admin, repositories, *, *, allow
    - p, proj:pern-app:platform-admin, certificates, *, *, allow
    - p, proj:pern-app:platform-admin, clusters, *, *, allow
    - p, proj:pern-app:platform-admin, exec, create, pern-app/*, allow
    - p, proj:pern-app:platform-admin, logs, get, pern-app/*, allow
    groups:
    - platform-admins
    - pern-app-admins
    
  # Production Administrator - Production environment focus
  - name: production-admin
    description: "Production environment administrators"
    policies:
    - p, proj:pern-app:production-admin, applications, get, pern-app/*production*, allow
    - p, proj:pern-app:production-admin, applications, sync, pern-app/*production*, allow
    - p, proj:pern-app:production-admin, applications, action/*, pern-app/*production*, allow
    - p, proj:pern-app:production-admin, applications, override, pern-app/*production*, deny
    - p, proj:pern-app:production-admin, applications, delete, pern-app/*production*, deny
    - p, proj:pern-app:production-admin, repositories, get, *, allow
    - p, proj:pern-app:production-admin, logs, get, pern-app/*production*, allow
    - p, proj:pern-app:production-admin, exec, create, pern-app/*production*, deny
    groups:
    - production-admins
    - sre-team
    
  # Developer - Development and staging access
  - name: developer
    description: "Developers with staging and development access"
    policies:
    - p, proj:pern-app:developer, applications, get, pern-app/*staging*, allow
    - p, proj:pern-app:developer, applications, get, pern-app/*development*, allow
    - p, proj:pern-app:developer, applications, sync, pern-app/*staging*, allow
    - p, proj:pern-app:developer, applications, sync, pern-app/*development*, allow
    - p, proj:pern-app:developer, applications, action/*, pern-app/*staging*, allow
    - p, proj:pern-app:developer, applications, action/*, pern-app/*development*, allow
    - p, proj:pern-app:developer, applications, override, pern-app/*staging*, allow
    - p, proj:pern-app:developer, applications, override, pern-app/*development*, allow
    - p, proj:pern-app:developer, applications, *, pern-app/*production*, deny
    - p, proj:pern-app:developer, repositories, get, *, allow
    - p, proj:pern-app:developer, logs, get, pern-app/*staging*, allow
    - p, proj:pern-app:developer, logs, get, pern-app/*development*, allow
    - p, proj:pern-app:developer, exec, create, pern-app/*staging*, allow
    - p, proj:pern-app:developer, exec, create, pern-app/*development*, allow
    groups:
    - developers
    - pern-app-developers
    
  # Viewer - Read-only access
  - name: viewer
    description: "Read-only access to all environments"
    policies:
    - p, proj:pern-app:viewer, applications, get, pern-app/*, allow
    - p, proj:pern-app:viewer, repositories, get, *, allow
    - p, proj:pern-app:viewer, logs, get, pern-app/*, allow
    - p, proj:pern-app:viewer, applications, sync, pern-app/*, deny
    - p, proj:pern-app:viewer, applications, action/*, pern-app/*, deny
    - p, proj:pern-app:viewer, exec, create, pern-app/*, deny
    groups:
    - viewers
    - readonly-users
    
  # CI/CD Service Account - Automated deployments
  - name: cicd-service
    description: "CI/CD service account for automated deployments"
    policies:
    - p, proj:pern-app:cicd-service, applications, get, pern-app/*, allow
    - p, proj:pern-app:cicd-service, applications, sync, pern-app/*staging*, allow
    - p, proj:pern-app:cicd-service, applications, sync, pern-app/*development*, allow
    - p, proj:pern-app:cicd-service, applications, sync, pern-app/*production*, deny
    - p, proj:pern-app:cicd-service, repositories, get, *, allow
    - p, proj:pern-app:cicd-service, applications, action/*, pern-app/*, deny
    - p, proj:pern-app:cicd-service, exec, create, pern-app/*, deny
    - p, proj:pern-app:cicd-service, logs, get, pern-app/*, allow

  # Sync windows for controlled deployments
  syncWindows:
  - kind: allow
    schedule: '0 2 * * 1-5'  # Monday to Friday, 2 AM UTC
    duration: 4h
    applications:
    - 'pern-app-production'
    manualSync: false
    timeZone: 'UTC'
  - kind: allow
    schedule: '0 6,14,22 * * *'  # 6 AM, 2 PM, 10 PM UTC daily
    duration: 2h
    applications:
    - 'pern-app-staging'
    manualSync: true
    timeZone: 'UTC'
  - kind: allow
    schedule: '0 * * * *'  # Every hour
    duration: 1h
    applications:
    - 'pern-app-development'
    manualSync: true
    timeZone: 'UTC'

  # Orphaned resource management
  orphanedResources:
    warn: true
    ignore:
    - group: ''
      kind: Secret
      name: '*-token-*'
    - group: ''
      kind: ConfigMap
      name: 'kube-root-ca.crt'

  # Signature verification (optional - enable for enhanced security)
  signatureKeys:
  - keyID: # Add GPG key ID for signed commits

---
# Backend Analysis Templates
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: success-rate-analysis
  namespace: argocd
  labels:
    app.kubernetes.io/name: success-rate-analysis
    app.kubernetes.io/component: analysis-template
    app.kubernetes.io/part-of: pern-gitops
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    analysis.argoproj.io/description: "Production-grade success rate analysis for progressive delivery"
spec:
  args:
  - name: service-name
  - name: namespace
    value: "pern-app-production"
  - name: success-rate-threshold
    value: "99"
  - name: error-rate-threshold  
    value: "1"
  - name: response-time-threshold
    value: "500"
  
  metrics:
  # Primary success rate analysis
  - name: success-rate
    interval: 60s
    count: 5
    successCondition: result[0] >= 95
    failureLimit: 3
    inconclusiveLimit: 2
    provider:
      prometheus:
        address: http://prometheus-server.monitoring.svc.cluster.local:80
        query: |
          (
            sum(rate(http_requests_total{
              job="{{args.service-name}}", 
              namespace="{{args.namespace}}", 
              status!~"5.."
            }[2m])) / 
            sum(rate(http_requests_total{
              job="{{args.service-name}}", 
              namespace="{{args.namespace}}"
            }[2m]))
          ) * 100

---
# Frontend Performance Analysis Template
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: frontend-performance-analysis
  namespace: argocd
  labels:
    app.kubernetes.io/name: frontend-performance-analysis
    app.kubernetes.io/component: analysis-template
    app.kubernetes.io/part-of: pern-gitops
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
    analysis.argoproj.io/description: "Frontend performance analysis for React application progressive delivery"
spec:
  args:
  - name: service-name
  - name: namespace
    value: "pern-app-production"
  - name: ingress-class
    value: "nginx"
  metrics:
  # Frontend Response Time P95 Analysis
  - name: frontend-response-time-p95
    interval: 30s
    count: 4
    successCondition: result[0] <= 300
    failureLimit: 2
    inconclusiveLimit: 1
    provider:
      prometheus:
        address: http://prometheus-server.monitoring.svc.cluster.local:80
        query: |
          histogram_quantile(0.95, 
            sum(rate(nginx_ingress_controller_request_duration_seconds_bucket{
              ingress="frontend-ingress",
              namespace="{{args.namespace}}"
            }[2m])) by (le)
          ) * 1000

---
# ApplicationSet for Multi-Environment Management
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: pern-app
  namespace: argocd
  labels:
    app.kubernetes.io/name: pern-app-applicationset
    app.kubernetes.io/component: application-management
    app.kubernetes.io/part-of: pern-gitops
    app.kubernetes.io/managed-by: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    applicationset.argoproj.io/description: "Multi-environment PERN application management with progressive delivery"
spec:
  generators:
  - matrix:
      generators:
      # Git directory generator for overlay discovery
      - git:
          repoURL: https://github.com/mankinimbom/pern-gitops.git
          revision: HEAD
          directories:
          - path: apps/pern-app/overlays/*
          - path: apps/*/overlays/*
      # Environment-specific configurations
      - list:
          elements:
          - environment: production
            replicas: "5"
            resources: high
            syncPolicy: manual
            syncWindow: controlled
            approvalRequired: "true"
          - environment: staging  
            replicas: "3"
            resources: medium
            syncPolicy: automatic
            syncWindow: flexible
            approvalRequired: "false"
          - environment: development
            replicas: "2"
            resources: low
            syncPolicy: automatic
            syncWindow: open
            approvalRequired: "false"
      
  template:
    metadata:
      name: 'pern-app-{{path.basename}}'
      labels:
        app.kubernetes.io/name: pern-app
        app.kubernetes.io/component: '{{path.basename}}'
        app.kubernetes.io/part-of: pern-application
        environment: '{{path.basename}}'
        deployment.type: progressive-delivery
      annotations:
        argocd.argoproj.io/sync-wave: "2"
        notifications.argoproj.io/subscribe.on-sync-succeeded.slack: pern-deployments
        notifications.argoproj.io/subscribe.on-sync-failed.slack: pern-alerts
        notifications.argoproj.io/subscribe.on-health-degraded.slack: pern-alerts
    spec:
      project: pern-app
      source:
        repoURL: https://github.com/mankinimbom/pern-gitops.git
        targetRevision: HEAD
        path: '{{path}}'
      destination:
        server: https://kubernetes.default.svc
        namespace: 'pern-app-{{path.basename}}'
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
          allowEmpty: false
        syncOptions:
        - CreateNamespace=true
        - PrunePropagationPolicy=foreground
        - PruneLast=true
        - ApplyOutOfSyncOnly=true
        retry:
          limit: 5
          backoff:
            duration: 5s
            factor: 2
            maxDuration: 3m
      revisionHistoryLimit: 10
